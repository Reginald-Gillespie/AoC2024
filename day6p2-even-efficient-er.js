const start = Date.now();

let input =
`.#..#......................#........#........................................#.............#......#...............#...............
.......#...........#........................#..............#.....#......#..##............#.....#.....................##...........
.#.....#........#.##..#.............#...........#................#............#.#.........#.....................#......#..........
...........#...#.#.................................#.....................#............#.....#.#................#..#...............
..................................................................................#...............................................
..................#....................#.................#.........#..#.................#...........#...................#.........
.......#......#................#.......#............................#.................#.........................#...#........#....
................................#..............................................................#.........#.........#..............
.......................................................#............#......#........#.#...................#............#..........
.....#......#..............................................#..............................................#.......................
......#..........................................................................................#................#...............
............................#..................#............#..#.#..............#..........#......................................
......#..........................#...................#..........#....#.........................#.......................#....#..#..
..................................#..........#....................................................................#........#......
..#.................................#..................................................#......................#...................
.....#............#..................#......#...................................#.#........#.#......#........#....................
........#......................#.....#...#.##................................#......#.............................................
...........#.........#...............................................................................#............................
..................................#...##...............................#.............#.........................................##.
..........................#.#..#......................................#........#..............................#...................
......#...........###..#....#........................................................................................#............
..............#.....................................................................#......##.............#.......................
.................................#...................#.........#..............................................#...........#.......
....................#..#...................................................#................................#........#............
........................................#.#.#..................#....................#.....#.................#.....................
.........................#....#.....#.................##...............................................#.......#...#..............
..#.........................#....................#.........................#..............................#...................#...
..................##....#..#..#.#.................................................................#...............................
..............#........................................................#.............................#......#.....................
.................#...........#........................#......#..........##....................#.................................#.
..........................#.............................................#..#.................................#.........#...#......
..#..................##.....................................................#.....................#.......#.....#.................
....#.........................................#..................#.#.........................#.......................#............
...#.....#.#..............................................................#................#......................#...#........#..
.............................#..#......#.....................................................##...................................
...........#......................#....#.........#........................#......................................................#
............#.............................................#.................................#....#................................
..............................................................#.............#................#.........#.........................#
..........................................#....#........#......................#.....#.............#..............................
..#..#.............#...............................................#.....................................................#........
................................................................................#.............#...................................
...............................................#.......................#................#............#....................#.#.....
.......................#.............................#.#..................#...#....#.................................#...#.....#..
.......................#...........................#.........................................#.........#.........................#
...#.........#.....#..........................................#...................................................................
..........#..#...#...#........................#..........#..........................................#......#.........#............
...............#............................#.#...................##.....................................................#........
.........................................................#....................#........................#.........#....##....#...#.
......................................#.#................................................#........................#...............
..........#.............................................................#..#..#..............................#...#...#.#..........
.........#.....................................................................................#...........#..#......#..........#.
............................#....................#..............#...#.............................................................
...........................................................#........#......................#.................................#....
.........#..................#.........#.......#...............................#................#.............#...........#........
............................#.........#...........................................................................................
................................#...........#.......................................#..........#.#.....#..........................
..........................................#.................................................................................#.....
..............#...............................................#...................................................................
...#....#.....................#..........#..#......................#..............................................................
.......................#..........#.................................................#......#.............#........#....#..........
.........................................................................#.#......................................#...............
..........................................#.......................#...............................................#.........#...#.
............................#.......................................................#...#.........#..#...##........#..............
...........................................................................#..............#..........#.............#..............
#............#..#...#..#........#....................#...........#..#.........................................#..........#........
...........................................................................#......#..^.........#.........#........................
......#............................#.............................................................................................#
......................#.....#.......................................................#........................#..........#.........
................#....#.......#.............................#..............#....................#....#....................#........
......#...................................#..................................................................#....................
.....#..............#.#...........................................................#.................#.........#......#........#...
..#..#..#..#........#...........#...........#....##...........#.....................#.............................................
......................##..........................................................................................................
...........#............#.........................................................#.....#.....#....................#..............
#.............#..........#...............#..#.......................................#..............................#..............
#.......................................#........#....#.......................................................#..#.............#..
.......................#...#.....#..#...........................#...........#.........................#...#...#................#..
#...............................................................#........................................#.....................#..
..#.....................#............................##..........#..................##...#.....................................#..
.......#...................##..........................................#........#.................................................
.........................................................#............................................#...............##..........
.......................#......#..............................................................................................#....
...........#.......................................#.................................#..........#.............#..................#
....#.............#......#............................#........................#...................#......#.....#..........#......
.................................................................#................................#...............................
..........................................................#.......................#...#...........................................
.#............#...........................................#............................#..............................#...#.#.....
..#.................................................#.............................................#.....................#.........
.....#...............#...#.......................#.......................#......................................#...........#.....
...........#...#................................#.............................#........#.........................................#
..............................#.....................#......................#...#................................#.................
.........#.....................................................#...#......................................#................#......
.....#.....................#.................................#...................................................#....#......#....
................#.........#.........................#...........#...#..............................................#..............
.................................#....................................................................#..................#......#.
#..............#......................................................................#.....#.....................................
.............#......#..............##.#............#.#.....................#..........#.......#..........................#........
.......#............#.................#...........................................................#.............................#.
...........................#.......................#..................#....#....................................#.................
....#.....##...........................................#...........#.............#........................#.....#.................
............................#..............................................##..........#..................#.......#...............
#.............................#.............#...............................#..........#...#.....................................#
.............#.......#.....................................#...###......##...............#..#..............#.........#............
.......#......##.....#..................#....................................#............#................#...................#..
..............#......................#............#........#.....................................................#.........#....#.
.............#.......#...............................................##......#...........#...........#............................
#.#....#..............................................................#.........................................#...............#.
...#....#........................#.#.......#.....................#.............................#.#......................#.#.......
.##........................................................#.#...................#.....#.................................#........
............................#.#..................................#....#...........................................................
..................................................#......#...............#...............................#..#..#.......#..........
..........#......................#..........#.........................#...............#..##.....................#.................
...#.......#.........................................................#............#.........#...#................................#
....................#...................................#..........#.....#...#..#........#............#................#..........
...............................#........#.....................................#.....................................#.........#...
....#....................#...................................#.#........................#.........................................
.........#............................#.....................#.............#...........##.........#................................
.............................................##........................................#......#................................#..
...#...............................#.#...#...........#.............................#.............................................#
.............................#...........#................#..................................................#............#.......
................#....................................................................................#..#.#.......................
...#.............#.#..#.......................#.................#...............#..#....#..............#............#......#......
...........#......#............................#.....#..........#.#.................#..........#...........#...............#...#..
....#..................#...........................#.........#............#........#..........#..............................#....
..........#.......#...................#......#.......#.......#....................#.....................................#.........
...#....................................................#......#...#...................#.....................#....................
....................#..#.....#......#...................#............#.......................................#...............#....
.........................#.......#.....#..#.......#...........#......##..............................#.........#..................
.#...........#...#.........#....#...#.......#....#........................#...................#...#..................#............
.........##......#..............................#....................#..#...#..................#............................#.....`

const { Worker, isMainThread, parentPort, workerData } = require('worker_threads');
const os = require('os');

// Memoize key parsing to avoid repeated string-to-number conversions
const memoizedKey = (() => {
    const cache = {
        "." : 0,
        "#" : 1,
        "X" : 3,
        "O" : 4,
        "^" : 9,
    };
    return (char) => cache[char];
})();

// Optimize coordinate finding with early return
function getCoord(arr, target) {
    for (let y = 0; y < arr.length; y++) {
        for (let x = 0; x < arr[y].length; x++) {
            if (arr[y][x] === target) return [x, y];
        }
    }
    return null;
}

// Constant direction increment to avoid repeated computation
const DIRECTION_INCREMENT = {
    increment: (currentDirection) => [-1 * currentDirection[1], currentDirection[0]]
};

// Optimized deep clone with a single pass
function fastClone(input) {
    const output = new Array(input.length);
    for (let y = 0; y < input.length; y++) {
        output[y] = new Array(input[y].length);
        for (let x = 0; x < input[y].length; x++) {
            output[y][x] = Array.isArray(input[y][x]) 
                ? [...input[y][x]] 
                : input[y][x];
        }
    }
    return output;
}

function runGuard(input, obstructionPos = null) {
    const key = memoizedKey;
    let guardLocation = getCoord(input, 9);
    let direction = [0, -1];
    let runInput = fastClone(input);

    if (obstructionPos) runInput[obstructionPos[1]][obstructionPos[0]] = key("#");

    let createsLoop = false;

    while (true) {
        const nextPossibleLocation = [
            guardLocation[0] + direction[0], 
            guardLocation[1] + direction[1]
        ];
        
        const nextPossibleCell = runInput?.[nextPossibleLocation[1]]?.[nextPossibleLocation[0]];

        if (nextPossibleCell === undefined || nextPossibleCell === null) 
            break;

        const thisSquare = runInput?.[guardLocation[1]]?.[guardLocation[0]];
        
        if (Array.isArray(thisSquare)) {
            if (thisSquare.some(dir => 
                dir[0] === direction[0] && dir[1] === direction[1]
            )) {
                createsLoop = true;
                break;
            }
        }
        
        const processedNextCell = Array.isArray(nextPossibleCell) 
            ? key("X") 
            : nextPossibleCell;

        if (createsLoop) break;

        switch (processedNextCell) {
            case key("."): 
            case key("X"):
                if (!Array.isArray(runInput[guardLocation[1]][guardLocation[0]])) 
                    runInput[guardLocation[1]][guardLocation[0]] = [];
                
                runInput[guardLocation[1]][guardLocation[0]].push(direction);
                guardLocation = nextPossibleLocation;
                break;

            case key("#"):
                direction = DIRECTION_INCREMENT.increment(direction);
                break;
        }
    }

    runInput[guardLocation[1]][guardLocation[0]] = [];

    return [createsLoop, runInput];
}

// Worker thread logic
if (!isMainThread) {
    const { input, obstructions, key: parsedKey } = workerData;
    const parsedInput = input.trim().split("\n").map(row => 
        row.split("").map(c => parsedKey[c])
    );
    
    let localLoopCount = 0;
    for (const obstruction of obstructions) {
        const [createsLoop] = runGuard(parsedInput, obstruction);
        if (createsLoop) {
            localLoopCount++;
        }
    }
    
    parentPort.postMessage(localLoopCount);
}

// Main thread logic for parallel processing
class GuardSimulation {
    constructor(workerCount = os.cpus().length) {
        this.workerCount = Math.max(1, workerCount);
    }

    async runParallelSimulation(input) {
        // Precompute key for passing to workers
        const key = {
            "." : 0,
            "#" : 1,
            "X" : 3,
            "O" : 4,
            "^" : 9,
        };

        // Parse input and find possible obstructions
        const parsedInput = input.trim().split("\n").map(p => p.split("").map(c => key[c]));
        const [_, normalPath] = runGuard(parsedInput);
        
        let possibleObstructions = [];
        normalPath.forEach((row, rowIndex) => {
            row.forEach((cell, cellIndex) => {
                if (Array.isArray(cell)) possibleObstructions.push([cellIndex, rowIndex]);
            })
        });

        // Divide obstructions among workers
        const obstructionChunks = [];
        const chunkSize = Math.ceil(possibleObstructions.length / this.workerCount);
        
        for (let i = 0; i < possibleObstructions.length; i += chunkSize) {
            obstructionChunks.push(possibleObstructions.slice(i, i + chunkSize));
        }

        // Create workers
        const workers = obstructionChunks.map(obstructions => 
            new Promise((resolve, reject) => {
                const worker = new Worker(__filename, {
                    workerData: { input, obstructions, key }
                });

                worker.on('message', resolve);
                worker.on('error', reject);
                worker.on('exit', (code) => {
                    if (code !== 0)
                        reject(new Error(`Worker stopped with exit code ${code}`));
                });
            })
        );

        // Wait for all workers and sum their results
        const workerResults = await Promise.all(workers);
        return workerResults.reduce((a, b) => a + b, 0);
    }
}

// Auto-run if this is the main module
if (isMainThread && require.main === module) {
    // Example input (replace with your actual input)

    const start = Date.now();
    const simulation = new GuardSimulation(15);
    
    simulation.runParallelSimulation(input)
        .then(loopCount => {
            const end = Date.now();
            console.log(`Took ${(end-start)/1000} seconds`);
            console.log(`Num loops: ${loopCount}`);
        })
        .catch(console.error);
}

// Export for use in other modules
module.exports = { GuardSimulation, runGuard };
